globals[
  selected_last
  selected_next2last
  visualization-params
  
  visualization-actor-visualizingParameter
  visualization-actor-observingParameter
  visualization-actor-visualizingRangeType
  visualization-actor-visualizingRange
  visualization-actor-observingRangeMin
  visualization-actor-observingRangeMax
]

to select-actor [actor]
  ask actor[set label-color white]
end

to unselect-actor [actor]
  ask actor[set label-color red]
end

to display_relationship_strength_statistics
  ;to put in "pen update commands" histogram [count link-neighbors] of turtles
  ;histogram [1 2 45 3 45 45]
  ;histogram [thicknes-end2] of friendships
  ;plot friendships-thicknes-plot
  ;;print word "min % max thicknes-end1:" word max-one-of friendships [thicknes-end1]
 ; print word "max thicknes-end2:" max-one-of friendships [thicknes-end2]
  ;show count patches with-max [pxcor]
end


to do-plotting
     ;; plot the number of infected individuals at each step
     set-current-plot "friendships strength"
     set-current-plot-pen "thicknes"
     let thicnkesses [thicknes-end1] of friendships
     let mean_thicnkesses (mean thicnkesses)
     ; print mean_thicnkesses
     plot mean_thicnkesses
     
     set-current-plot "attractiveness realization"
     set-current-plot-pen "ar"     
     ; print word "mean_attractiveness_realization: " mean_attractiveness_realization
     plot mean_attractiveness_realization
end


to display-friendships-weight
  display_relationship_strength_statistics
end


; displays the friendship of an actor
to display-friendship-of-actor
  if(actor-inspection-selected = 0) [set actor-inspection-selected nobody]
  if(actor-inspection-selected != nobody)[
    ask actor-inspection-selected[
      set color color - 2
      set size size - 2
      ask friendship-neighbors[
        set color color - 2
      ]
      ask my-friendships [
        set color color - 2
        ; friendships are always visible
        ;if(Links-show-extra = false)[set hidden? true]
      ]
      ; links to iamwhats
      ask iamwhat-actor-neighbors[
        set color color - 2
        set size size - 2
      ]
      ask my-iamwhat-actors [
        set color color - 2
        if(Links-show-extra = false)[set hidden? true]
      ]
    ]
  ]
  ifelse(actor-inspection-selected = self)[
    set actor-inspection-selected nobody
  ]
  [    
    set selected_next2last selected_last
    set selected_last self
    
    set actor-inspection-selected self
    
    set color color + 2
    set size size + 2
    ask friendship-neighbors[
      set color color + 2
    ]
    ask my-friendships [
      ask actor-inspection-selected [show word "Thicnkess:" (word actor-get-turtle-link-endpoint-value myself "thicknes" word ". strength_non_normalized:" actor-get-turtle-link-endpoint-value myself "strength_non_normalized")] 
      set color color + 2
      set hidden? false
    ]
    ; links to iamwhats
    ask iamwhat-actor-neighbors[
      set color color + 2
      set size size + 2
    ]
    ask my-iamwhat-actors [
      set color color + 2
      set hidden? false
    ]
    type-actor self
  ]
end

to type-actor [actor]
  ask actor[
    type word "** Selected: " (word label ":\n")
    type word "sociable: " (word sociable "\n")
    print "linked-IamWhats:"
    foreach (sort get-linked-IamWhats actor)
    [
      print [label] of ?
    ]
  ]
end


; displays all links to selected iamwhat
; it displays links to actors that are interested in it, but it will display later activities also, etc
to display-links-of-iamwhat
  ; type "iamwhat-inspection-selected = " type iamwhat-inspection-selected type "\n"
  if(iamwhat-inspection-selected = 0) [set iamwhat-inspection-selected nobody]

  ; type "checking if iamwhat-inspection-selected is nobody. It is " type iamwhat-inspection-selected type "\n"
  if(iamwhat-inspection-selected != nobody)[
    ; type "restoring  iamwhat-inspection-selected = " type iamwhat-inspection-selected type "\n"
    ask iamwhat-inspection-selected[
      set color color - 2
      set size size - 2
      ask iamwhat-actor-neighbors[
        set color color - 2
        set size size - 2
      ]
      ask my-iamwhat-actors [
        set color color - 2
        if(Links-show-extra = false)[set hidden? true]
      ]      
    ]
  ]
  
  ifelse(iamwhat-inspection-selected = self)[
    ; type "resetting iamwhat-inspection-selected = " type iamwhat-inspection-selected type " to nobody\n"
    set iamwhat-inspection-selected nobody
  ][
    ; type "setting iamwhat-inspection-selected = " type self type "\n"
    set iamwhat-inspection-selected self
    set color color + 2
    set size size + 2
    ask iamwhat-actor-neighbors[
      set color color + 2
      set size size + 2
    ]
    ask my-iamwhat-actors [
    set color color + 2
    set hidden? false
    ]
  ]
end

to display-selected-activity
  if(activity-inspection-selected = 0) [set activity-inspection-selected nobody]
  if(activity-inspection-selected != nobody)[
    ask activity-inspection-selected[
      set color color - 2
      set size size - 2
      ; equivalent to command link-neighbors
      ; Reports the agentset of all (actors) turtles found at the other end of undirected links connected to this turtle.
      
      ; equivalent to command in-<breed>-neighbors
      ask in-activity-actor-neighbors[
        set color color - 2
        set size size - 2
      ]
      ; equivalent to command out-<breed>-neighbors
      ask out-activity-actor-neighbors[
        set color color - 2
        set size size - 2
      ]
      ; equivalent to command my-out-<breeds>
      ask my-out-activity-actors [
        set color color - 2
        if(Links-show-extra = false)[set hidden? true]
      ]
      ; equivalent to command my-in-<breeds>
      ask my-in-activity-actors [
        set color color - 2
        if(Links-show-extra = false)[set hidden? true]
      ]

      ; links to iamwhats
      ask iamwhat-activity-neighbors[
        set color color - 2
        set size size - 2
      ]
      ask my-iamwhat-activities [
        set color color - 2
        if(Links-show-extra = false)[set hidden? true]
      ]

      ; links to activity-types
      ask activity-type-activity-neighbors[
        set color color - 2
        set size size - 2
      ]
      ask my-activity-type-activities [
        set color color - 2
        if(Links-show-extra = false)[set hidden? true]
      ]
    ]
  ]
  
  ifelse(activity-inspection-selected = self)[
    set activity-inspection-selected nobody
  ]
  [
    set selected_next2last selected_last
    set selected_last self
    
    set activity-inspection-selected self
    set color color + 2
    set size size + 2
    ; equivalent to command link-neighbors
    ; Reports the agentset of all (actors) turtles found at the other end of undirected links connected to this turtle.
    
    ; equivalent to command in-<breed>-neighbors
    ask in-activity-actor-neighbors[
      set color color + 2
      set size size + 2
    ]
    ; equivalent to command out-<breed>-neighbors
    ask out-activity-actor-neighbors[
      set color color + 2
      set size size + 2
    ]
    ; equivalent to command my-out-<breeds>
    ask my-out-activity-actors [
      set color color + 2
      set hidden? false
    ]
    ; equivalent to command my-in-<breeds>
    ask my-in-activity-actors [
      set color color + 2
      set hidden? false
    ]

    ; links to activities
    ask iamwhat-activity-neighbors[
      set color color + 2
      set size size + 2
    ]
    ask my-iamwhat-activities [
      set color color + 2
      set hidden? false
    ]

    ; links to activity-types
    ask activity-type-activity-neighbors[
      set color color + 2
      set size size + 2
    ]
    ask my-activity-type-activities [
      set color color + 2
      set hidden? false
    ]
  ]
end

; =========================
; Visualization of changes in network
; =========================

to visualization-setup
  show "visualization-setup started"
  ;set visualization-params 
  set visualization-params table:make

  ; parameters:
  ; 0 time that visualization is live
  ; 1 color (-1 means no change)
  ; 2 color offset (0 means no change)
  ; 3 size change
  table:put visualization-params "link:activity:sent" [2 -1 2 0.1]
  table:put visualization-params "link:friendship:critical" [2 red 2 0.2]
end

to visualization-set-visual-corelation-actor [visualizingParameter observingParameter visualizingRangeType visualizingRange observingRangeMin observingRangeMax]
  set visualization-actor-visualizingParameter visualizingParameter
  set visualization-actor-observingParameter observingParameter
  set visualization-actor-visualizingRangeType visualizingRangeType
  ifelse(visualization-actor-visualizingRangeType = "rgb-scale")[
    let colorFirst extract-rgb first visualizingRange
    let colorLast extract-rgb last visualizingRange
    set visualization-actor-visualizingRange lput colorLast lput colorFirst []
  ][
    set visualization-actor-visualizingRange visualizingRange
  ]
  set visualization-actor-observingRangeMin observingRangeMin
  set visualization-actor-observingRangeMax observingRangeMax
end

to _visualization-set-visual-corelate-actor
  if(Visualization-corelate-actor-to-variables and visualization-actor-visualizingRangeType != 0 and visualization-actor-visualizingRangeType != "" and visualization-actor-visualizingRangeType != "none")[
    let observedValue 0
    let observedValueScaled 0
    let visualizedValue 0
    
    let commandGet "calculation_actor_1"
    let commandSet word "set " word visualization-actor-visualizingParameter " visualizedValue"

    let rMin 0
    let gMin 0
    let bMin 0
    let rMax 0
    let gMax 0
    let bMax 0
    if(visualization-actor-visualizingRangeType = "rgb-scale")[
      set rMin item 0 (first visualization-actor-visualizingRange)
      set gMin item 1 (first visualization-actor-visualizingRange)
      set bMin item 2 (first visualization-actor-visualizingRange)
      set rMax item 0 (last visualization-actor-visualizingRange)
      set gMax item 1 (last visualization-actor-visualizingRange)
      set bMax item 2 (last visualization-actor-visualizingRange)
    ]

    ask actors[
      set observedValue runresult commandGet
      ; show word "command: " word commandGet word ", happiness: " calculation_actor_1
      set observedValueScaled (scale-get-scaled-value observedValue visualization-actor-observingRangeMin visualization-actor-observingRangeMax)
      if(visualization-actor-visualizingRangeType = "numeric-scale")[
        set visualizedValue scale-get-unscaled-value observedValueScaled (first visualization-actor-visualizingRange) (last visualization-actor-visualizingRange)
      ]
      if(visualization-actor-visualizingRangeType = "rgb-scale")[
        set visualizedValue approximate-rgb (scale-get-unscaled-value observedValueScaled rMin rMax) (scale-get-unscaled-value observedValueScaled gMin gMax) (scale-get-unscaled-value observedValueScaled bMin bMax)
      ]
      run commandSet
    ]
  ]
end

to _visualization-show-labels
  ifelse(Visualization-show-actor-labels)[
    ask actors[set label visual-actor-label]
  ][
    ask actors[set label ""]
  ]
  ifelse(Visualization-show-friendship-labels)[
    ask friendships[set label visual-link-label]
  ][
    ask friendships[set label ""]
  ]
end

to visualization-set-state-actor [actorSelected state]
  show word "visualization-set-state-actor state: " state
  let stateDesc table:get visualization-params state
  show word "visualization-set-state-actor stateDesc: " stateDesc

  ask actorSelected[
    set visual-actor-state state
    set visual-actor-color-old color
    set visual-actor-size-old size
    set visual-actor-timer position 0 stateDesc
    set color position 1 stateDesc
    set color color + position 2 stateDesc
    set size size + position 3 stateDesc
  ]
end

to visualization-set-label-actor [actorSelected labelNew] 
  ask actorSelected[
    set visual-actor-label labelNew
    if(Visualization-show-actor-labels)[
      set label labelNew
    ]
  ]
end

to visualization-set-label-friendship [linkSelected labelNew] 
  ask linkSelected[
    set visual-link-label labelNew
    if(Visualization-show-friendship-labels)[
      set label labelNew
    ]
  ]
end

to visualization-set-state-friendship [linkSelected state]
  ; show word "visualization-set-state-friendship state: " state
  let stateDesc table:get visualization-params state
  ; show word "visualization-set-state-friendship stateDesc: " stateDesc

  ask linkSelected[
    ifelse(visual-link-state != 0)[
      if(visual-link-state = state)[
        set visual-link-timer item 0 stateDesc
      ]
    ][
      set visual-link-state state
      set visual-link-color-old color
      set visual-link-thickness-old thickness
      set visual-link-timer item 0 stateDesc
      if(item 1 stateDesc >= 0)[set color item 1 stateDesc]
      set color color + item 2 stateDesc
      set thickness thickness + item 3 stateDesc
    ]
  ]
end

to visualization-update-colors
  ;visualize-test
  _visualization-show-labels
  _visualization-set-visual-corelate-actor

  ask friendships with [visual-link-state != 0][
    set visual-link-timer visual-link-timer - 1
    if(visual-link-timer <= 0)[
      set visual-link-state 0
      set visual-link-timer 0

      set color visual-link-color-old
      set thickness visual-link-thickness-old
    ]
  ]
end

; testing purpose
; =========================
to visualize-test
  ask actors  with [effect-left > 0 ][set effect-left effect-left - 1]
   
  reset-actors-test
  if(count actors >= 3)[
    ask n-of 3 actors[
      set shape "face happy"
      set size ACTOR_SIZE_ACTIVE
      set effect-left 5
      set color blue + 2
    ]
  ]
end

to reset-actors-test
  ask actors  with [effect-left <= 0 ][
    set shape ACTOR_SHAPE_NEUTRAL
    set size ACTOR_SIZE_NEUTRAL
    set color blue
  ]
end

; ========================
