; In order to rise error (to make it possible for this file to be loaded inside of NetLogo environment) just keep this line uncommented. There are too many error to NetLogo not notice them ;) :x. Comment it while you are running code. You need it only on loading model in NetLogo

; turtles, links and patches parameters
; "TURTLES": "who","color","heading","xcor","ycor","shape","label","label-color","breed","hidden?","size","pen-size","pen-mode","infected?","infection-count"
; "LINKS": "end1","end2","color","label","label-color","hidden?","breed","thickness","shape","tie-mode"
; "PATCHES": "pxcor","pycor","pcolor","plabel","plabel-color"

extensions [table]

; show "Hello World from friendship_model.nls"

globals
[
  ; "constants"  
  ACTOR_SIZE_NEUTRAL          ;; sizes of actor breed
  ACTOR_SIZE_ACTIVE

  ACTOR_SHAPE_NEUTRAL         ;; shapes of actor breed
  ACTOR_SHAPE_SAD
  ACTOR_SHAPE_HAPPY

  INTERESTS_LIST              ;; list of all possible interests

  actor-types-list            ; list of all actor types in the system (not used yet?)
  activities-list             ; list of all activity types in the system
  iamwhats-list           ; list of all IAmWhat types in the system
]

; http://modelingcommons.org/browse/one_model/2284#model_tabs_browse_procedures

; ========================================================================================
; Actors and friendships
; ========================================================================================

; describes actors (in other words: friends, members, nodes) in network
breed [actors actor]
actors-own
[
  effect-left                  ; for testing purpose
  ; each activity comes at some price of either emission or absorption
  ; that is the price necessary to participate in activity (ether to initiate it (emission) or participate (absorbtion))
  price-absorbed               ; price of absorbed activities over time (note, each tick this get reduced by healing factor)
  price-absorption-limit       ; this is the limit over which actor cannot absorb any more activity
  price-emitted                ; [roce of emitted activities over time (note, each tick this get reduced by healing factor)
  price-emission-limit         ; this is the limit over which actor cannot emit any more activity
]

; describes friendships (in other words: connections, links, relations) between actors in the network
; instead of using two directed links between each actors, we 
undirected-link-breed [friendships friendship]
friendships-own
[
  e12_thicknes
  e21_thicknes
]

; ========================================================================================
; Activities
; ========================================================================================

; describes data structure containing description of each activity-type
; activity-types are loaded from external CSV file
breed [activity-types activity-type]
activity-types-own
[
  interests ; a list of interests
  id
  a-type
  name
  activity-pay-off
  price-to-diffuse
  price-to-absorb
  appearance-probability
  lifetime
]

; describes activity that happens inside the network
; each activity that happenes (mostly initiatd by actors) is represented by one activity, even if it is multi-actor activity
breed [activities activity]
activities-own
[
]

; describes influence of activity to the each actor participated in activity
; it is a link between activity (breed) and actor (breed)
; it is directed because we want to know direction of activity regarding actors
directed-link-breed [activity-actors activity-actor]
activity-actors-own
[
  pay-off
]
 
; ========================================================================================
; IAmWhat
; ========================================================================================
; describes IamWhat (these are usually interests/skills related to actors/activities)
breed [iamwhats iamwhat]
iamwhats-own
[
  w-type                       ; string representing type
  probability                ; probability of occurrence
]

; describes how actors define themselves (interest, skill, traits)
; it is a link between iamwhat (breed) and actor (breed)
undirected-link-breed [iamwhat-actors iamwhat-actor]
iamwhat-actors-own
[
  iamhow
  iamlevel
]

to friendship_model_setup
  ; "constants"  
  set ACTOR_SIZE_NEUTRAL 5
  set ACTOR_SIZE_ACTIVE 6
  set ACTOR_SHAPE_NEUTRAL "face neutral"
  set ACTOR_SHAPE_SAD "face sad"
  set ACTOR_SHAPE_HAPPY "face happy"
  
  set INTERESTS_LIST (list "salsa" "capoeira" "SNA" "guitar" "poetry")
end

; this function reads CSV file
; any string with spaces as a part of field should be encapsulated wih DOBULE-QUOTES
; IMPORTANT: we are not allowed to use single-quotes since they are interpretted in a wrong way by NetLogo and generates error
to-report load-csv-to-list [filename]
  type "Loading CSV file " type filename type "\n"
  let csvData []
  let csvColumns []
  file-open filename
  
  while [not file-at-end?] [
    let thisline file-read-line
    if(not empty? thisline)[
      ;show thisline
      ;show length thisline
      ;set thisline remove " " thisline
      set thisline (word "[ " (replace-all "," " " thisline) " ]")
      ;show thisline
      ;set thisline "[ \"id\"  \"type\"  \"name\"  \"pay off\"  \"price\"  \"lifetime\" ]"
      let csvRow (read-from-string thisline)
      type "row (" type (length csvRow) type "): " type csvRow type "\n"
      set csvData lput csvRow csvData
    ]
  ]
  file-close
  report csvData
end

; this function reads CSV file
; any string with spaces as a part of field should be encapsulated wih DOBULE-QUOTES
; IMPORTANT: we are not allowed to use single-quotes since they are interpretted in a wrong way by NetLogo and generates error
; IMPORTANT: comma is not supported in the string values due to processing approach (it could be improved if rewritten)
to-report load-csv-to-hash [filename]
  type "Loading CSV file " type filename type "\n"
  let csvData []
  let csvColumns []
  file-open filename
  
  ; reading first line with column names
  if(not file-at-end?) [
    let thisline file-read-line
    if(not empty? thisline)[

      set csvColumns listFromCsvRow thisline true
      
      type "columns (" type (length csvColumns) type "): " type csvColumns type "\n"
    ]
  ]
  
  while [not file-at-end?] [
    let thisline file-read-line
    if(not empty? thisline)[
      ;show thisline
      ;show length thisline
      ;set thisline remove " " thisline

      let csvRow listFromCsvRow thisline false
      
      let rowHash table:make
      
      ; http://ccl.northwestern.edu/netlogo/docs/dict/foreach.html
      (foreach csvColumns csvRow [
        table:put rowHash ?1 ?2        
      ])
      ;print table:length rowHash
      ;print table:get rowHash "leopard"
      ;print table:keys rowHash
      show rowHash
      
      set csvData lput rowHash csvData
    ]
  ]
  file-close
  report csvData
end

to-report listFromCsvRow [rowStr interprete-str?]
  let csvRow []
  ifelse (interprete-str?) [
    set rowStr (word "[ " (replace-all "," " " rowStr) " ]")
    ;show rowStr
    ;set rowStr "[ \"id\"  \"type\"  \"name\"  \"pay off\"  \"price\"  \"lifetime\" ]"
    set csvRow (read-from-string rowStr)
    ;type "row (" type (length csvRow) type "): " type csvRow type "\n"  
  ][
    set csvRow string-split rowStr ","
  ]
  report csvRow
end

to-report string-split [ string sep ] ; sep must be non-empty string
  ;type "string = (" type string type "), sep = (" type sep type ")\n"
  let result [] ; return value
  let sepLen length sep
  loop ; exit when done
  [ 
    let next-pos position sep string
    if not is-number? next-pos
    [
      report reverse (fput string result)
    ]
    set result fput (substring string 0 next-pos) result
    set string substring string (next-pos + sepLen) (length string)
    ;show result
  ]
end

to-report replace-all [string1 with-string in-string]
  while [ member? string1 in-string ] [
    let index position string1 in-string
    set in-string replace-item index in-string with-string
  ] 
  report in-string
end

to save-csv
end