extensions [nw]

;  actors-num                 ;; number of actors existing in system, used for the initalization of model
;  friendship-avg-degree      ;; average degree of friendships for actors

; http://stackoverflow.com/questions/5830045/including-a-netlogo-source-file-into-another

__includes["friendship_model.nls" "friendship_manager_setup.nls" "friendship_model_activities_diffusion.nls" "friendship_dynamics.nls" "visualization.nls" "friendship_measures.nls" "iamwhats.nls"
  "activity.nls" "util.nls"]

; from the interface
;------------------------------------------
; Actor-price-absorption-restitution              ; amount of absorption price that actor gains over each tick
; Actor-price-emission-restitution                ; amount of emission price that actor gains over each tick
; Actor-iamwhat-num                               ; number of IAmWhats that each actor is interested in
; Links-show-extra                                ; indicates if we should have extra links (activity-actor, iamwhat-actor, ...) always visible

globals
[
  actor-inspection-selected
  activity-inspection-selected
  iamwhat-inspection-selected
  mouse-was-up?
  last-activity
  micro-ticks
  plot-pen-color-current
  inspecting-actor
  ;counter
 ]

;;;;;;;;;;;;;;;;;;;;;;;
;;; Main Procedures ;;;
;;;;;;;;;;;;;;;;;;;;;;;

to setup
  ;clear-all-plots
  clear-all
  reset-ticks
  set micro-ticks 0
  ; random-seed Random-generator-initial 47822
  if(Random-generator-initial != 0)[random-seed Random-generator-initial]
  
  ask patches[
    ;set pcolor white
  ]
  
  visualize-test

  setup-start-sasha
  setup-start-sinisha
  
  setup-actors-and-friendships
  visualization-setup
  
  setup-end-sasha
  setup-end-sinisha
  set plot-pen-color-current 5
end

;; spring layout of infection tree while in tree mode
;; otherwise, layout all nodes and friendships
to do-layout
    repeat 5 [layout-spring actors friendships 0.03 20 20]
    ask actors[
      if(xcor < min-pxcor + 12)[set xcor min-pxcor + 12]
      if(xcor > max-pxcor - 12)[set xcor max-pxcor - 12]
      if(ycor < min-pycor + 12)[set ycor min-pycor + 12]
      if(ycor > max-pycor - 12)[set ycor max-pycor - 12]
    ]
end

; responsible for executing one time tick in the model
to do-tick
  ;show word micro-ticks word ", " Micro-ticks-per-tick
  ifelse(micro-ticks >= Micro-ticks-per-tick - 1)[
    tick
    ; =========================
    ; initializing tick
    ; =========================
    ; random-seed Random-generator-initial 47822
    ;show word Max-activities-num word ", " activities-num-emitted
    if((Max-activities-num = 0) or (Max-activities-num > activities-num-emitted))[
      do-tick-sasha-start
      do-tick-sinisha-start
      
      visualization-update-colors

      ; =========================
      ; sending activities
      ; =========================
      ; type "\n\nDifussing activities:\n"
      let activities-per-tick (count actors) * Activities-number-per-tick
      repeat activities-per-tick[
        set last-activity diffuse-activity
        if last-activity != nobody [
          affect-relatinships-by-activity last-activity
        ]
      ]  
      
      ; finalizing tick
      ; ========================
      display
      recover-energies
      
      do-tick-sasha-end
      do-tick-sinisha-end
      if(FM?)[fm-tick-update]
      set micro-ticks 0
    ]
  ][
   set micro-ticks micro-ticks + 1
   wait 0.1
  ]
end

; This function recovers (heals) system (network) members
; in this case it includes only actors:
;   - they get reduced price on both absorption and emittion of activities for specified amount over the system tick
to recover-energies
  ask actors[
    set price-absorbed (price-absorbed - Actor-price-absorption-restitution)
    set price-emitted (price-emitted - Actor-price-emission-restitution)
  ]
end

; this function resets the history of the model and starts everything from the beginning but without changin structure or any randomly choosen initial parameters
to rest-history
  ask activities[die]
  ask activity-type-activities[die]
  ask activity-actors[die]
  ask iamwhat-activities[die]
  set activities-num-emitted 0
  set activities-list []
  set global_calculation_1 0
  set global_calculation_2 0
  set global_calculation_3 0
  
  ask actors[
    set calculation_actor_1 0
    set calculation_actor_2 0
    set calculation_actor_3 0
  ]

  ; clear-all-plots
  ;plot-pen-reset
  plot-pen-up
  plotxy 0 0
  plot-pen-down
  ; error if pen penname doesn't exist
  ; set-current-plot-pen penname
  set plot-pen-color-current plot-pen-color-current + 20
  set-plot-pen-color plot-pen-color-current
  reset-history-sasha
  reset-history-sinisha
  display
end

to select-actor-by-who
  ask one-of actors with [who = inspecting-actor-new][
    set inspecting-actor self
    inspect-refresh-output
    display-friendship-of-actor
  ]
end

; This is a on-mouse-click function (we add extra guarding variable to switch mouse-down? into mouse-click behaviour
to inspect-system
  ifelse (mouse-down?)
  [
    if (mouse-was-up?)[
      ; It checks what actor did we click on and then it shows info about it
      let nearest-actors actors with [distancexy-nowrap mouse-xcor mouse-ycor < 5]
      if any? nearest-actors
      [
        ask one-of nearest-actors
        [
          set inspecting-actor self
          inspect-refresh-output
          display-friendship-of-actor
        ]
        display
      ]

      ; It checks what activity did we click on and then it shows info about it
      let nearest-activities activities with [distancexy-nowrap mouse-xcor mouse-ycor < 5]
      if any? nearest-activities
      [
        ask one-of nearest-activities
        [
          display-selected-activity
        ]
        display
      ]

      ; It checks what iamwhat did we click on and then it shows info about it
      let nearest-iamwhats iamwhats with [distancexy-nowrap mouse-xcor mouse-ycor < 5]
      if any? nearest-iamwhats
      [
        ask one-of nearest-iamwhats
        [
          display-links-of-iamwhat
        ]
        display
      ]
    ]
    set mouse-was-up? false
  ][
    set mouse-was-up? true
  ]  
end

to inspect-refresh-output
  clear-output
  ask inspecting-actor[
    output-print word "Selected actor: " self
    output-print word "Happiness: " calculation_actor_1
    
    foreach sort friendship-neighbors[
      let actorNeighbor ?
      let friendshipSelected friendship-with actorNeighbor
      output-print word "Actor: " actorNeighbor
      ;output-print word "  friendshipSelected: " friendshipSelected
      output-print word "  Manual-attractiveness: " precision actor-get-turtle-link-endpoint-value friendshipSelected "manual-attractiveness" 3
      output-print word "  Time-to-lost: " precision actor-get-turtle-link-endpoint-value friendshipSelected "time-to-lost" 3
    ]
  ]
end

