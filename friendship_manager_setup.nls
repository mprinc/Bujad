; In order to rise error (to make it possible for this file to be loaded inside of NetLogo environment) just keep this line uncommented. There are too many error to NetLogo not notice them ;) :x. Comment it while you are running code. You need it only on loading model in NetLogo

globals[
  activities-list
]

to load-activity-types
  set actor-types-list []
  let activity-types-filename "activity-types.csv"
  type "\n\nLoading activity-type descriptions from file " type activity-types-filename type "\n"

  ;let activity-typesCsvList load-csv-to-list activity-types-filename
  ;type "activity-typesCsvList (" type (length activity-typesCsvList) type "): " type activity-typesCsvList type "\n"

  let activity-typesCsvHash load-csv-to-hash activity-types-filename
  type "activity-typesCsvHash (" type (length activity-typesCsvHash) type "): " type activity-typesCsvHash type "\n"
  
  ; run "show \"Hello from run!\""
  foreach activity-typesCsvHash[
    let rowHash ?
    type "iterating: " type rowHash type "\n"
    
    ;; setup activity-type
    create-activity-types 1
    [
      set actor-types-list lput self actor-types-list
      setxy (min-pxcor + 15 * (length actor-types-list)) (min-pycor + 5)
      set size 5
      set label-color white
      set label table:get rowHash "name"
      ;set hidden? true
      ; adding parameters from CSV table
      foreach (table:keys rowHash)[
        let columnName ?
        let columnValue table:get rowHash columnName
        let commandStr word "set " word columnName word " " columnValue
        ;show commandStr
        run commandStr
      ]
    ]

    ;show table:keys rowHash
          ;print table:length rowHash
      ;print table:get rowHash "leopard"
      ;print table:keys rowHash
  ]
  
end

to load-iamwhats
  set iamwhats-list []
  let iamwhats-filename "iamwhats.csv"
  type "\n\nLoading iamwhat descriptions from file " type iamwhats-filename type "\n"

  let iamwhatsCsvHash load-csv-to-hash iamwhats-filename
  type "iamwhatsCsvHash (" type (length iamwhatsCsvHash) type "): " type iamwhatsCsvHash type "\n"
  
  foreach iamwhatsCsvHash[
    let rowHash ?
    type "iterating: " type rowHash type "\n"
    
    ;; setup activity-type
    create-iamwhats 1
    [
      set iamwhats-list lput self iamwhats-list
      setxy (min-pxcor + 15 * (length iamwhats-list)) (max-pxcor - 5)
      set size 5
      ;set hidden? true
      ; adding parameters from CSV table
      foreach (table:keys rowHash)[
        let columnName ?
        let columnValue table:get rowHash columnName
        let commandStr word "set " word columnName word " " columnValue
        ;show commandStr
        run commandStr
      ]
    ]
  ]  
end

;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup Procedures ;;;
;;;;;;;;;;;;;;;;;;;;;;;;

; entry point to the model
to setup-actors-and-friendships
  load-activity-types
  load-iamwhats

  friendship_model_setup

  ; globals
  set actor-inspection-selected nobody
  set mouse-was-up? true
  
  set activities-list []
  setup-actors
  setup-actor-iamwhats
  setup-friendships
end

to setup-actors
  set-default-shape actors "face neutral"; "face happy", "face neutral", "face sad", "person", "outlined circle"

  ;; setup actors
  create-actors actors-num
    [
      let actorX random-xcor
      let actorY random-ycor
      if(actorX < min-pxcor + 15)[set actorX min-pxcor + 15]
      if(actorX > max-pxcor - 15)[set actorX max-pxcor - 15]
      if(actorY < min-pycor + 15)[set actorY min-pycor + 15]
      if(actorY > max-pycor - 15)[set actorY max-pycor - 15]
      setxy actorX actorY
      set size ACTOR_SIZE_NEUTRAL
      set price-absorption-limit actor-price-absorption-limit
      set price-emission-limit actor-price-emission-limit  

      ;show price-absorption-limit
      set effect-left 0
      set color blue - 2
      set label-color white
      visualization-set-label-actor self word "actor-" who
      set sociable random 3
    ]
  
  ;; Layout actors:
  ;repeat 15 [do-layout]
  ;repeat 55 [do-layout display]
  display
end

to setup-friendships
  let INITIAL_STRENGTH 0
  ifelse(Friendships_generator = "ER")[ ;; generate erdos-renyi random graph  
    let num-friendships ceiling (actors-num * friendship-avg-degree / 2)
    while [count friendships < num-friendships]
    [
      ask one-of actors [
        create-friendship-with one-of other actors[
          set color blue
          set thickness 0.5
          set manual-attractiveness-end1 1
          set manual-attractiveness-end2 2
        ]
      ]
    ]
  ]
  [     ;"Attractiveness"
    ask actors [
      ask other actors[
        ;show word myself self
        ;if(myself = self) [show word myself (word " = " self)]
        let attractiveness (actors-attractiveness-IamWhats myself self)
        ;show attractiveness
        if(attractiveness > 0)[ ;if actors share interests
          ;show word myself self
          set attractiveness attractiveness + actor-attractiveness-preference self
          ifelse(friendship-neighbor? myself)
          [
            let frl friendship-with myself;
           ; print "already exists:"
            ask frl[
              set thicknes-end2 INITIAL_STRENGTH; //attractiveness
             ;show word "thicknes-end1:" (word thicknes-end1 (word "; thicknes-end2:" thicknes-end2))              
            ]
           ;show [end1] of frl = self
          ]
          [
            ask myself [
              create-friendship-with myself[
                set thicknes-end1 INITIAL_STRENGTH; //attractiveness
              ]
            ]
          ]
        ]      
      ]
    ]
    display-friendships-weight
  ]
end


to setup-actor-iamwhats
  ask actors[
    let iamwhat-num round random-normal Actor-iamwhat-mean Actor-iamwhat--standard-deviation
    if(iamwhat-num < 1)[set iamwhat-num 1]
    if(iamwhat-num > count iamwhats)[set iamwhat-num count iamwhats]
    ask n-of iamwhat-num iamwhats[
      ; myself = actor
      create-iamwhat-actor-with myself[
        set color brown
        set thickness 0.5
        set level 1
        if(Links-show-extra = false)[set hidden? true]
      ]      
    ]
  ]
end

; ========================================================================================
; Friendship strategies related methods
; ========================================================================================

to setup-manual-attractiveness-between-actors
  show "setup-manual-attractiveness-between-actors"
  ask actors[
    let actorsOther other actors
    foreach sort actorsOther[
      let actorOther ?
      let friendshipToOther friendship-with actorOther
      if(friendshipToOther != nobody)[
        ; file://localhost/Applications/NetLogo%205.0.3/docs/dictionary.html#random-normal
        let manualAtract random-normal Attractiveness-manual-mean Attractiveness-manual-standard-deviation
        if(manualAtract < 0)[set manualAtract 0]
        if(manualAtract > 1)[set manualAtract 1]
        
        actor-set-turtle-link-endpoint-value friendshipToOther "manual-attractiveness" manualAtract
        ;let value actor-get-turtle-link-endpoint-value friendshipToOther "manual-attractiveness"
        ;show word "value : " value
        
        ; we want bot friends have similar atractiveness
        let manualAtractOther manualAtract + random 0.1 - 0.05
        if(manualAtractOther < 0)[set manualAtractOther 0]
        if(manualAtractOther > 1)[set manualAtractOther 1]
        ask actorOther[
          actor-set-turtle-link-endpoint-value friendshipToOther "manual-attractiveness" manualAtract
        ]
      ]
    ]
  ]
end

to setup-random-popularity-for-actors
  show "setup-random-popularity-for-actors"
  ask actors[
    let popularityVal random-normal Popularity-random-mean Popularity-random-standard-deviation
    if(popularityVal < 0)[set popularityVal 0]
    if(popularityVal > 1)[set popularityVal 1]
    
    set popularity popularityVal
  ]
end

; populate friendship management parameters
; like time how often we want to be active with each of our friends
to FM-repopulate
    show "setup - Friendship-max-inactive-time for each friendship"
  ask actors[
    let actorsOther other actors
    foreach sort actorsOther[
      let actorOther ?
      let friendshipToOther friendship-with actorOther
      if(friendshipToOther != nobody)[
        ; file://localhost/Applications/NetLogo%205.0.3/docs/dictionary.html#random-normal
        let manualAtract random-normal Attractiveness-manual-mean Attractiveness-manual-standard-deviation
        if(manualAtract < 1)[set manualAtract 1]
        ;if(manualAtract > 1)[set manualAtract 1]
        let selectedFriendshipMaxInactiveTime  manualAtract * Friendship-max-inactive-time
        
        
        actor-set-turtle-link-endpoint-value friendshipToOther "manual-attractiveness" selectedFriendshipMaxInactiveTime
        actor-set-turtle-link-endpoint-value friendshipToOther "time-to-lost" selectedFriendshipMaxInactiveTime
        ;let value actor-get-turtle-link-endpoint-value friendshipToOther "manual-attractiveness"
        ;show word "value : " value
        
        ; AT THE MOMENT I THINK WE DO NOT WANT IT (it is used in setup-manual-attractiveness-between-actors to allow happiness be balanced)
        ; we want bot friends have similar atractiveness
        ;let manualAtractOther manualAtract + random 0.1 - 0.05
        ;if(manualAtractOther < 0)[set manualAtractOther 0]
        ;if(manualAtractOther > 1)[set manualAtractOther 1]
        ;ask actorOther[
        ;  actor-set-turtle-link-endpoint-value friendshipToOther "manual-attractiveness" manualAtract
        ;]
      ]
    ]
  ]
end