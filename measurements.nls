globals
[
  measurement_stop
]

to stop-measurement
  set measurement_stop true
end

to do_measurement
  reset-ticks
  set measurement_stop false
  
  if(MeasuringCase = "default")
  [
    loop [do-tick]
  ]
  
  if(MeasuringCase = "sasha")
  [
    loop [do-tick]
  ]
  
  if(MeasuringCase = "sinisha")
  [
    loop [do-tick]
  ]
  
  if(MeasuringCase = "HappinessByPopularity")
  [
    measure_HappinessByPopularity
  ]
  
  if(MeasuringCase = "HappinessByWayOfActivitySelection")
  [
    measure_HappinessByWayOfActivitySelection
  ]
  
  if(MeasuringCase = "HappinessByFriendshipManagerInfluence")
  [
    measure_HappinessByFriendshipManagerInfluence
  ]
  
  if(MeasuringCase = "AttractRlzByWayOfActivitySelection")
  [
    measure_AttractRlzByWayOfActivitySelection
  ]  
end


to do-plotting-measurement
  if(MeasuringCase = "HappinessByPopularity")
  [
    do-plotting-HappinessByPopularity
  ]
  
  if(MeasuringCase = "HappinessByWayOfActivitySelection")
  [
    do-plotting-HappinessByWayOfActivitySelection
  ]
  if(MeasuringCase = "HappinessByFriendshipManagerInfluence")
  [
    do-plotting-HappinessByFriendshipManagerInfluence
  ]
  if(MeasuringCase = "AttractRlzByWayOfActivitySelection")
  [
    do-plotting-AttractRlzByWayOfActivitySelection
  ]
end

to reset-history-measurement
  if(MeasuringCase = "default")
  [
  ]
  
  if(MeasuringCase = "sasha")
  [
    set-current-plot "Calc 1"
    set-current-plot-pen "default"
    
    plot-pen-up
    plotxy 0 0
    plot-pen-down
  ]
  
  if(MeasuringCase = "sinisha")
  [
    set-current-plot "Calc 1"
    set-current-plot-pen "default"
    
    plot-pen-up
    plotxy 0 0
    plot-pen-down
  ]
  
  if(MeasuringCase = "HappinessByPopularity")
  [
    set ploted-on-activity-number 0

    set plot-pen-color-current plot-pen-color-current + 10

    ; clear-all-plots
    ;plot-pen-reset
    set-current-plot "Calc 2"
    set-current-plot-pen "default"
    ; label-x: popularity standard deviation
    ; error if pen penname doesn't exist
    ; set-current-plot-pen penname
    set-plot-pen-color plot-pen-color-current

    set-current-plot "Calc 2"
    set-current-plot-pen "default"
    
    plot-pen-up
    plotxy 0 0
    plot-pen-down
    
    ; error if pen penname doesn't exist
    ; set-current-plot-pen penname
    set-plot-pen-color plot-pen-color-current
  ]
  
  if(MeasuringCase = "HappinessByFriendshipManagerInfluence")
  [
    set ploted-on-activity-number 0

    set plot-pen-color-current plot-pen-color-current + 10

    ; clear-all-plots
    ;plot-pen-reset
    set-current-plot "Calc 2"
    set-current-plot-pen "default"
    ; label-x: Friendship manager influence
    
    ; error if pen penname doesn't exist
    ; set-current-plot-pen penname
    set-plot-pen-color plot-pen-color-current

    set-current-plot "Calc 2"
    set-current-plot-pen "default"
    
    plot-pen-up
    plotxy 0 0
    plot-pen-down
    
    ; error if pen penname doesn't exist
    ; set-current-plot-pen penname
    set-plot-pen-color plot-pen-color-current
  ]

  if(MeasuringCase = "HappinessByWayOfActivitySelection")
  [
    set ploted-on-activity-number 0
  ]
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; measuring mean happiness based on popularity distribution
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to measure_HappinessByPopularity
  ;set popularity
  set FM? false
  set Chooser-whom-to-send "popularity"
  set Chooser-whom-to-receive "anyone"
  set Popularity-random-mean 0.5
  set Popularity-random-standard-deviation 0
  
  set plot-pen-color-current 5

  set-current-plot "Calc 1"
  set-current-plot-pen "default"
  set-plot-pen-mode 0 ; bar mode
  set-plot-pen-color plot-pen-color-current

  set-current-plot "Calc 2"
  set-current-plot-pen "default"
  set-plot-pen-mode 0 ; line mode
  set-plot-pen-color plot-pen-color-current

  let ticksNo 25
  
  let deviationSet (list 0 0.125 0.25 0.375 0.5 0.625 0.75 0.875 1)
  show word "deviationSet: " deviationSet
  
  
  reset-history
  foreach deviationSet[
    let deviation ?
    show word "measuring for deviation = " deviation
    set Popularity-random-standard-deviation deviation
    
    setup-random-popularity-for-actors
    
    repeat ticksNo[
      do-tick
      if(measurement_stop)[stop]
    ]
    
    ; from: to do-plotting-sasha
    ; ---------------
    ;; plot the number of infected individuals at each step
    set-current-plot "Calc 1"
    set-current-plot-pen "default"
    ;set-plot-pen-interval
    plotxy deviation global_calculation_1
    reset-history
  ]
end

to do-plotting-HappinessByPopularity
  ; show word "Testing for plotting , activities-num-emitted = " word activities-num-emitted word ", " word (activities-num-emitted / 100) word " =? " floor (activities-num-emitted / 100) 
  ; every 20 activities
  if( (activities-num-emitted - ploted-on-activity-number) >= plot-for-each-number-of-activities)[
    show word "Plotting, activities-num-emitted = " activities-num-emitted
    set ploted-on-activity-number activities-num-emitted
    
    measure-happiness-per-node
    
    set-current-plot "Calc 2"
    set-current-plot-pen "default"
    ;set-plot-pen-interval
    plotxy activities-num-emitted global_calculation_1
    
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; measuring mean happiness based on choosing activities by popularity or shared interests
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to measure_HappinessByWayOfActivitySelection
  reset-history 
  set Chooser-whom-to-receive "anyone"
  let limit Measuring_ticks; 50
  
  set FM? false
  set-current-plot-pen "default"
  set Chooser-whom-to-send "popularity"
  set Chooser-whom-to-receive "anyone"
  reset-ticks;
  while [ticks <= limit]
  [
    do-tick
    if(measurement_stop)[stop]
  ]
  
  reset-history
  set-current-plot-pen "pen-2"
  set Chooser-whom-to-send "shared_interest"
  reset-ticks;
  while [ticks <= limit]
  [
    do-tick
    if(measurement_stop)[stop]
  ]
end

to do-plotting-HappinessByWayOfActivitySelection
    ; from: to do-tick-sasha-end
    ; ---------------
    ; show word "Testing for plotting , activities-num-emitted = " word activities-num-emitted word ", " word (activities-num-emitted / 100) word " =? " floor (activities-num-emitted / 100) 
    ; every 20 activities
    if( (activities-num-emitted - ploted-on-activity-number) >= plot-for-each-number-of-activities)[
      ;show word "Plotting, activities-num-emitted = " activities-num-emitted
      set ploted-on-activity-number activities-num-emitted
      
      measure-happiness-per-node
   
      ;; plot the number of infected individuals at each step
      set-current-plot "Calc 1"
      ;set-plot-pen-interval
      plotxy ticks global_calculation_1
    ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; measuring mean happiness based on the influence of friendship manager suggestions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to measure_HappinessByFriendshipManagerInfluence
  ;set popularity

  set FM? true
  set FM-type "Happiness(FlowIn)"
  set FM-intensity 0

  set Chooser-whom-to-send "popularity"
  set Chooser-whom-to-receive "anyone"
  set Popularity-random-mean 0.8
  set Popularity-random-standard-deviation 0.5
  
  set plot-pen-color-current 5

  set-current-plot "Calc 1"
  set-current-plot-pen "default"
  set-plot-pen-mode 0 ; bar mode
  set-plot-pen-color plot-pen-color-current

  set-current-plot "Calc 2"
  set-current-plot-pen "default"
  set-plot-pen-mode 0 ; line mode
  set-plot-pen-color plot-pen-color-current

  let ticksNo 100
  
  let FM-intensity-step 0.05
  show word "FM-intensity-step: " FM-intensity-step

  reset-history
  while[FM-intensity < 1][
    show word "measuring for FM-intensity = " FM-intensity
    
    repeat ticksNo[
      do-tick
      if(measurement_stop)[stop]
    ]
    
    ; from: to do-plotting-sasha
    ; ---------------
    ;; plot the number of infected individuals at each step
    set-current-plot "Calc 1"
    set-current-plot-pen "default"
    ;set-plot-pen-interval
    plotxy FM-intensity global_calculation_1

    reset-history

    set FM-intensity FM-intensity + FM-intensity-step
    if(FM-intensity > 1)[set FM-intensity 1]
  ]
end

to do-plotting-HappinessByFriendshipManagerInfluence
  ; show word "Testing for plotting , activities-num-emitted = " word activities-num-emitted word ", " word (activities-num-emitted / 100) word " =? " floor (activities-num-emitted / 100) 
  ; every 20 activities
  if( (activities-num-emitted - ploted-on-activity-number) >= plot-for-each-number-of-activities)[
    show word "Plotting, activities-num-emitted = " activities-num-emitted
    set ploted-on-activity-number activities-num-emitted
    
    measure-happiness-per-node
    
    set-current-plot "Calc 2"
    set-current-plot-pen "default"
    ;set-plot-pen-interval
    plotxy activities-num-emitted global_calculation_1
    
  ]
end

to measure_AttractRlzByWayOfActivitySelection 
  print "measure_AttractRlzByWayOfActivitySelection"
  
  reset-history
  set Chooser-whom-to-receive "anyone"
  
  let limit Measuring_ticks; 50
  
  set-current-plot-pen "default"
  set Chooser-whom-to-send "popularity"
  while [ticks <= limit]
  [
    do-tick
    if(measurement_stop)[stop]
    ifelse( (ticks mod Time-for-activity-velocity) = 0)
    [  
      print word "calling 'set_strengths_for_actor' at tick " ticks   
      ask actors[
        set_strengths_for_actor self
      ]
      let ar mean_attractiveness_realization
    ]
    [
      ;print word "nonmod:" ticks   
    ]
  ]
  
  set Chooser-whom-to-send "shared_interest"
  
  reset-history
  set-current-plot-pen "pen-2"
  reset-ticks;
  while [ticks <= limit]
  [
    do-tick
    if(measurement_stop)[stop]
    ifelse( (ticks mod Time-for-activity-velocity) = 0)
    [  
      print word "calling 'set_strengths_for_actor' at tick " ticks   
      ask actors[
        set_strengths_for_actor self
      ]
      let ar mean_attractiveness_realization
    ]
    [
      ;print word "nonmod:" ticks   
    ]
  ]
end

to do-plotting-AttractRlzByWayOfActivitySelection
  ;; plot the number of infected individuals at each step
;  set-current-plot "friendships strength"
;  set-current-plot-pen "thicknes"
;  let thicnkesses [thicknes-end1] of friendships
;  let mean_thicnkesses (mean thicnkesses)
;  ; print mean_thicnkesses
;  plot mean_thicnkesses
  
  set-current-plot "attractiveness realization"
;  set-current-plot-pen "ar"     
  ; print word "mean_attractiveness_realization: " mean_attractiveness_realization
  let mar mean_attractiveness_realization
  plot mar
  set global_calculation_2 mar
end
