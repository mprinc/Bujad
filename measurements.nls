to do_measurement
  if(MeasuringCase = "HappinessByPopularity")
  [
    measure_HappinessByPopularity
  ]

  if(MeasuringCase = "HappinessByWayOfActivitySelection")
  [
    measure_HappinessByWayOfActivitySelection
  ]  
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; measuring mean happiness based on popularity distribution
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to measure_HappinessByPopularity
  ;set popularity
  set Chooser-whom-to-send "popularity"
  set Chooser-whom-to-receive "popularity"
  set Popularity-random-mean 0.5
  set Popularity-random-standard-deviation 4
  
  let ticksNo 50
  repeat ticksNo[
    do-tick

    ; from: to do-tick-sasha-end
    ; ---------------
    ; show word "Testing for plotting , activities-num-emitted = " word activities-num-emitted word ", " word (activities-num-emitted / 100) word " =? " floor (activities-num-emitted / 100) 
    ; every 100 activities
    if( (activities-num-emitted - ploted-on-activity-number) >= plot-for-each-number-of-activities)[
      show word "Plotting, activities-num-emitted = " activities-num-emitted
      set ploted-on-activity-number activities-num-emitted
      
      measure-happiness-per-node
    ]
    ; from: to do-plotting-sasha
    ; ---------------
     ;; plot the number of infected individuals at each step
     set-current-plot "Calc 1"
     set-current-plot-pen "default"
     ;set-plot-pen-interval
     plotxy activities-num-emitted global_calculation_1

  ]
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; measuring mean happiness based on choosing activities by popularity or shared interests
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to measure_HappinessByWayOfActivitySelection
  ; 
  set Chooser-whom-to-send "popularity"
    

  set Chooser-whom-to-send "shared_interest"
  
end