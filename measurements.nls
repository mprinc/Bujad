globals
[
  measurement_stop
]

to stop-measurement
  set measurement_stop true
end

to do_measurement
  reset-ticks
  set measurement_stop false

  if(MeasuringCase = "default")
  [
    loop [do-tick]
  ]
  
  if(MeasuringCase = "sasha")
  [
    loop [do-tick]
  ]
  
  if(MeasuringCase = "sinisha")
  [
    loop [do-tick]
  ]
  
  if(MeasuringCase = "HappinessByPopularity")
  [
    measure_HappinessByPopularity
  ]
  
  if(MeasuringCase = "HappinessByWayOfActivitySelection")
  [
    measure_HappinessByWayOfActivitySelection
  ]  
  
end


to do-plotting-measurement
  if(MeasuringCase = "HappinessByPopularity")
  [
    do-plotting-HappinessByPopularity
  ]
  
  if(MeasuringCase = "HappinessByWayOfActivitySelection")
  [
    do-plotting-HappinessByWayOfActivitySelection
  ]  
end

to reset-history-measurement
  if(MeasuringCase = "default")
  [
  ]
  
  if(MeasuringCase = "sasha")
  [
    reset-history-sasha
  ]
  
  if(MeasuringCase = "sinisha")
  [
    reset-history-sinisha
  ]
end

  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; measuring mean happiness based on popularity distribution
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to measure_HappinessByPopularity
  ;set popularity
  set Chooser-whom-to-send "popularity"
  set Chooser-whom-to-receive "anyone"
  set Popularity-random-mean 0.5
  set Popularity-random-standard-deviation 4
  
  let ticksNo 50
  
  let deviationSet (list 0 0.25 0.5)
  show word "deviationSet: " deviationSet


  set global_calculation_1 0
  foreach deviationSet[
    let deviation ?
    show word "measuring for deviation = " deviation

    repeat ticksNo[
      do-tick
      if(measurement_stop)[stop]

      ; from: to do-tick-sasha-end
      ; ---------------
      ; show word "Testing for plotting , activities-num-emitted = " word activities-num-emitted word ", " word (activities-num-emitted / 100) word " =? " floor (activities-num-emitted / 100) 
      ; every 20 activities
      if( (activities-num-emitted - ploted-on-activity-number) >= plot-for-each-number-of-activities)[
        show word "Plotting, activities-num-emitted = " activities-num-emitted
        set ploted-on-activity-number activities-num-emitted
        
        measure-happiness-per-node

        set-current-plot "Calc 2"
        set-current-plot-pen "default"
        ;set-plot-pen-interval
        plotxy activities-num-emitted global_calculation_1
        
      ]
    ]

    ; from: to do-plotting-sasha
    ; ---------------
    ;; plot the number of infected individuals at each step
    set-current-plot "Calc 1"
    set-current-plot-pen "default"
    ;set-plot-pen-interval
    plotxy deviation global_calculation_1
  ]
end

to do-plotting-HappinessByPopularity
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; measuring mean happiness based on choosing activities by popularity or shared interests
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to measure_HappinessByWayOfActivitySelection
  reset-history 
  let limit 20
  
  set-current-plot-pen "default"
  set Chooser-whom-to-send "popularity"
  reset-ticks;
  while [ticks <= limit]
  [
    do-tick
    if(measurement_stop)[stop]
    ; from: to do-tick-sasha-end
    ; ---------------
    ; show word "Testing for plotting , activities-num-emitted = " word activities-num-emitted word ", " word (activities-num-emitted / 100) word " =? " floor (activities-num-emitted / 100) 
    ; every 20 activities
    if( (activities-num-emitted - ploted-on-activity-number) >= plot-for-each-number-of-activities)[
      show word "Plotting, activities-num-emitted = " activities-num-emitted
      set ploted-on-activity-number activities-num-emitted
      
      measure-happiness-per-node
    ]
  ]
  
  reset-history
  set-current-plot-pen "pen-2"
  ; set Chooser-whom-to-send "shared_interest"
  reset-ticks;
  while [ticks <= limit]
  [
    do-tick
    if(measurement_stop)[stop]
    ; from: to do-tick-sasha-end
    ; ---------------
    ; show word "Testing for plotting , activities-num-emitted = " word activities-num-emitted word ", " word (activities-num-emitted / 100) word " =? " floor (activities-num-emitted / 100) 
    ; every 20 activities
    if( (activities-num-emitted - ploted-on-activity-number) >= plot-for-each-number-of-activities)[
      show word "Plotting, activities-num-emitted = " activities-num-emitted
      set ploted-on-activity-number activities-num-emitted
      
      measure-happiness-per-node
    ]
  ]
end

to do-plotting-HappinessByWayOfActivitySelection
  ;; plot the number of infected individuals at each step
  set-current-plot "Calc 1"
  ;set-plot-pen-interval
  plotxy ticks global_calculation_1
end
