; In order to rise error (to make it possible for this file to be loaded inside of NetLogo environment) just keep this line uncommented. There are too many error to NetLogo not notice them ;) :x. Comment it while you are running code. You need it only on loading model in NetLogo

to change-relationship-through-time [actor1 actor2]
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to set_strengths_for_actor [actor]
  ; print word "tick @ set_strengths_for_actor:" ticks
  let friends_list []
  let non-normalized_strengths []
  let normalized_strengths []
  ask actor[
    ask friendship-neighbors[
      set friends_list lput self friends_list
    ]
    
    foreach(friends_list)[
      set non-normalized_strengths lput (non-normalized-strength_for_friendship myself ?) non-normalized_strengths
    ]
    
    set normalized_strengths list_normalizing non-normalized_strengths
    ; show word length friends_list (word " vs " length normalized_strengths)
    (foreach friends_list normalized_strengths non-normalized_strengths
      [
        let mean_thickness 0;
        let friend ?1
        let normalized_strength ?2
        let non-normalized_strength ?3
        let thickness_other 0
        let non-normalized_strength_other 0
        ask friendship-with friend[
          let friendshipv self
          ask actor[
            actor-set-turtle-link-endpoint-value friendshipv "thicknes" normalized_strength
            actor-set-turtle-link-endpoint-value friendshipv "strength_non_normalized" non-normalized_strength
            ask friend[
              set thickness_other actor-get-turtle-link-endpoint-value friendshipv "thicknes"
              set non-normalized_strength_other actor-get-turtle-link-endpoint-value friendshipv "strength_non_normalized"
            ]
          ]
          ;print word "friendshipv" friendshipv
          ;print word "friendshipv is-friendship?: " is-friendship? friendshipv
          ask friendshipv[set strength (normalized_strength + thickness_other) / 2]
          ; print non-normalized_strength
          ; print word "non-normalized_strength_other: " non-normalized_strength_other
          ask friendshipv[set non-normalized_strength (non-normalized_strength + non-normalized_strength_other) / 2]
        ]        
      ])
  ]
end

to-report non-normalized-strength_for_friendship [actorMaster actorSlave]
  ; calculates velocity of price of activities
  
  let real_time Time-for-activity-velocity
  if(Time-for-activity-velocity > ticks)[ ; at the beginning of system work
    set real_time ticks
  ]
  report (price_last_activities actorMaster actorSlave real_time) / real_time
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; calculates  attractiveness  - how attractive is actorTo seen by actorFrom      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report actors-attractiveness [actorFrom actorTo]
  ; type word "actors-attractiveness(" (word [label] of actorFrom (word " " (word [label] of actorTo ")\n") ))
  let attractiveness 0
  
  set attractiveness attractiveness + (actors-attractiveness-IamWhats actorFrom actorTo)
  
  ;how sociable are both actors:
  set attractiveness attractiveness + Attractiveness-sociable-Ponder * ([sociable] of actorFrom) * ([sociable] of actorTo)
  
  set attractiveness attractiveness + (actor-attractiveness-preference actorTo)
  
  ;how many friends share actorFrom actorTo:
  ; type "Mutual friends:"
  ; ask actors with [friendship-neighbor? actorFrom and friendship-neighbor? actorTo]
  ; [
  ;   type [label] of self
  ; ]
  ; type "END - Mutual friends\n"
  report attractiveness
end

to-report actors-attractiveness-IamWhats-preference [actorFrom actorTo]
  report  actors-attractiveness-IamWhats actorFrom actorTo + actor-attractiveness-preference actorTo
end

to-report actors-attractiveness-IamWhats [actorFrom actorTo]
  let attractiveness 0
  let actorIamWhatsBetween get-shared-iamwhats actorFrom actorTo
  ask actorIamWhatsBetween[
    set attractiveness attractiveness + ([level] of (iamwhat-actor-with actorFrom)) * ([level] of (iamwhat-actor-with actorTo))
  ]  
  report Attractiveness-IAmWhats-Ponder * attractiveness
end

to-report actor-attractiveness-preference [actor]
  let preference 0
  ; what is "objective" preference of actor? we consider its friendship-degree:
  ask actor[set preference count friendship-neighbors]
  ; type word "preference:" (word preference "\n")
  report Attractiveness-Preference-Ponder * preference
end

to change-relationships-by-activity-for-actor [actor]
  
end

to-report calculate-activity-objective-payoff [activity]
  let payoff 0
  set payoff payoff + [intensity] of activity
  report payoff
  
end

to-report calculate-activity-subjective-payoff [activity]
  let payoff 0
  ; set payoff payoff + 
  report payoff
  
end

to-report calculate-activity-payoff [activity]
  let payoff 0
  set payoff payoff + calculate-activity-objective-payoff activity
  report payoff  
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; DEPRICATED-USED-BY-OLD-MODEL: changes closeness of al actors that took part in the activity    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to affect-relatinships-by-activity [activity]
  ; in this version of model we check if there is link between actors, we don't create new ones 
  
  ;getting activity actors
  let activity_actors []
  ask activity[
    ; type "actors in activity:\n"
    ask in-activity-actor-neighbors[ ; all actors that participated in this activity
      set activity_actors lput self activity_actors
    ]
    ask out-activity-actor-neighbors[ ; all actors that participated in this activity
      set activity_actors lput self activity_actors
    ]
  ] 
  
  foreach activity_actors [
    let actorFrom ?
    foreach activity_actors [
      if(? != actorFrom)[
        let actorTo ?
        ;  print (word [label] of actorFrom (word " -> " [label] of actorTo))
        let activity_attract Activity-atract-relationship-ponder * (actors-attractiveness actorFrom actorTo) * calculate-activity-payoff activity
        
        let f nobody
        ask actorFrom[
          set f friendship-with actorTo
        ]
        if(f != nobody)[
          ;  type word "f:" f;
          ask actorFrom[
            ;get old thickness
            let f_thickness actor-get-turtle-link-endpoint-value f "thicknes"          
            ; show word "old_thickness: " f_thickness
            
            set f_thickness f_thickness + activity_attract
            actor-set-turtle-link-endpoint-value f "thicknes" f_thickness          
            ; show word "new_thickness: " f_thickness
          ]
        ]
      ]
    ]    
  ]
end

;;;;;;;;; attractiveness_realization ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; returnes attractiveness_realization: 0: min, 1: max-attractiveness_realization
; expects that relationship thicknesses are normalized to [0,1]
;;;;;;;;;
to-report attractiveness_realization [actor]
  let ar 0
  let strengths []
  let attrs []
  let attrs_norm []
  ; print word [label] of actor " attractivenesses:"
  
  ; set strength and attractivness lists for all actor's neighbors:
  ask actors with [friendship-neighbor? myself] ; all neighbors
  [
    let actorTo self
    let f nobody
    ask actor[
      set f friendship-with actorTo
    ]
    if(f != nobody)[
      ; type word "f:" f;
      ask actor[ ; we need to be in its context so that 'actor-get-turtle-link-endpoint-value' returns its thickness
                 ;get old thickness
        set strengths lput (actor-get-turtle-link-endpoint-value f "thicknes") strengths ; thicnknesses are normalized already
        set attrs lput (actors-attractiveness actor actorTo) attrs
      ]
    ]   
  ] ; all neighbors
  
  print word [label] of actor ": (attractiveness_realization): "
  
  
  set attrs_norm list_normalizing attrs
  (foreach strengths attrs_norm
    [
      let strength_n ?1
      let attr ?2
      let ratio 1
      
      ifelse(strength_n  <= STRENGTH_MIN and attr <= ATTRACTIVNESS_MIN)
      [
        set ratio 1
      ]
      [
        ifelse(strength_n > attr) ; we want to add deviations between attractivness and strength as numbers in range [0,1]
        [
          set ratio attr / strength_n
        ]
        [
          set ratio strength_n / attr
        ]
      ]
      
      set ar ar + ratio
      ; type word attr (word " % " (word strength (word " - " (word ratio "; "))))
    ])
  set ar ar / length strengths
  print word "ar: " ar
  report ar
end


to-report attractiveness_realization-OLD [actor]
  let ar 0
  ; print word [label] of actor " attractivenesses:"
  ask actors with [friendship-neighbor? myself]
  [
    let actorTo self
    let f nobody
    ask actor[
      set f friendship-with actorTo
    ]
    if(f != nobody)[
      ; type word "f:" f;
      ask actor[
        ;get old thickness
        let f_thickness actor-get-turtle-link-endpoint-value f "thicknes"          
        ; show word "f_thickness: " f_thickness
        
        set ar (actors-attractiveness actor self) * f_thickness
        
        ; show word " - " ar
      ]
    ]   
  ]
  report ar
end

to-report mean_attractiveness_realization
  let ar 0
  ask actors[
    set ar ar + attractiveness_realization self
  ]
  set ar ar / count actors
  report ar
end

; DEPRECIATED: USED IN OLD MODEL
to decay_relationsips
  ask friendships[
    set thicknes-end1 thicknes-end1 - Relationship-Decay
    if(thicknes-end1 < Relationship-Treshold-Connected)[set thicknes-end1 Relationship-Treshold-Connected]
    
    set thicknes-end2 thicknes-end2 - Relationship-Decay
    if(thicknes-end2 < Relationship-Treshold-Connected)[set thicknes-end2 Relationship-Treshold-Connected]
    
  ]
end