; In order to rise error (to make it possible for this file to be loaded inside of NetLogo environment) just keep this line uncommented. There are too many error to NetLogo not notice them ;) :x. Comment it while you are running code. You need it only on loading model in NetLogo

to change-relationship-through-time [actor1 actor2]
   
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; calculates  attractiveness  - how attractive is actorTo seen by actorFrom      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
to-report actors-attractiveness [actorFrom actorTo]
  type word "actors-attractiveness(" (word [label] of actorFrom (word " " (word [label] of actorTo ")\n") ))
  let attractiveness 0
  
  let actorIamWhatsBetween get-shared-iamwhats actorFrom actorTo
  ask actorIamWhatsBetween[
    set attractiveness attractiveness + Attractiveness-IAmWhats-Ponder * ([level] of (iamwhat-actor-with actorFrom)) * ([level] of (iamwhat-actor-with actorTo))
  ]
  
  ;how sociable are both actors:
  set attractiveness attractiveness + Attractiveness-sociable-Ponder * ([sociable] of actorFrom) * ([sociable] of actorTo)
  
  ; what is "objective" preference of actorTo? we consider its friendship-degree:
  let preference 0
  ask actorTo[set preference count friendship-neighbors]
  ; type word "preference:" (word preference "\n")
  set attractiveness attractiveness + Attractiveness-Preference-Ponder * preference
  
  ;how many friends share actorFrom actorTo:
  type "Mutual friends:"
  ask actors with [friendship-neighbor? actorFrom and friendship-neighbor? actorTo]
  [
    type [label] of self
  ]
   type "END - Mutual friends\n"
  report attractiveness
end

to change-relationships-by-activity-for-actor [actor]
   
end


to-report calculate-activity-objective-payoff [activity]
  let payoff 0
  set payoff payoff + intensity
  report payoff
  
end

to-report calculate-activity-payoff [activity]
  let payoff 0
  set payoff payoff + calculate-activity-objective-payoff activity
  report payoff  
end

;calculating shared IamWhats/interests:
; n1, n2 can be of breed actor or activity
to-report get-shared-iamwhats [n1 n2]
  let shared_iamwhats []
     
  let n1IamWhats [] ; IamWhats connected to n1
  let n2IamWhats [] ; IamWhats connected to n2
  
  ifelse(is-actor? n1)
  [ask n1 [set n1IamWhats iamwhat-actor-neighbors]]
  [ask n1 [set n1IamWhats iamwhat-activity-neighbors]]
  
  ifelse(is-actor? n2)
  [ask n2 [set n2IamWhats iamwhat-actor-neighbors]]
  [ask n2 [set n2IamWhats iamwhat-activity-neighbors]]
  ; http://stackoverflow.com/questions/8425518/netlogo-two-agentsets-operations
  set shared_iamwhats iamwhats with [member? self n1IamWhats and member? self n2IamWhats]
  
  report shared_iamwhats
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; changes closeness of al actors that took part in the activity    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to affect-relatinships-by-activity [activity]
  ; in this version of model we check if there is link between actors, we don't create new ones 
  ask activity[
    type "actors in activity:\n"
    ask in-activity-actor-neighbors[ ; all actors that participated in this activity
      type (word "-" label "\n")
    ]
  ] 
  
end