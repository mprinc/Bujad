; In order to rise error (to make it possible for this file to be loaded inside of NetLogo environment) just keep this line uncommented. There are too many error to NetLogo not notice them ;) :x. Comment it while you are running code. You need it only on loading model in NetLogo

to change-relationship-through-time [actor1 actor2]
   
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; calculates  attractiveness  - how attractive is actorTo seen by actorFrom      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
to-report actors-attractiveness [actorFrom actorTo]
  type word "actors-attractiveness(" (word [label] of actorFrom (word " " (word [label] of actorTo ")\n") ))
  let attractiveness 0
  
  set attractiveness attractiveness + (actors-attractiveness-IamWhats actorFrom actorTo)
  
  ;how sociable are both actors:
  set attractiveness attractiveness + Attractiveness-sociable-Ponder * ([sociable] of actorFrom) * ([sociable] of actorTo)
  
  set attractiveness attractiveness + (actor-attractiveness-preference actorTo)
  
  ;how many friends share actorFrom actorTo:
  type "Mutual friends:"
  ask actors with [friendship-neighbor? actorFrom and friendship-neighbor? actorTo]
  [
    type [label] of self
  ]
   type "END - Mutual friends\n"
  report attractiveness
end

to-report actors-attractiveness-IamWhats-preference [actorFrom actorTo]
  report  actors-attractiveness-IamWhats actorFrom actorTo + actor-attractiveness-preference actorTo
end

to-report actors-attractiveness-IamWhats [actorFrom actorTo]
  let attractiveness 0
  let actorIamWhatsBetween get-shared-iamwhats actorFrom actorTo
  ask actorIamWhatsBetween[
    set attractiveness attractiveness + ([level] of (iamwhat-actor-with actorFrom)) * ([level] of (iamwhat-actor-with actorTo))
  ]  
  report Attractiveness-IAmWhats-Ponder * attractiveness
end

to-report actor-attractiveness-preference [actor]
  let preference 0
  ; what is "objective" preference of actor? we consider its friendship-degree:
  ask actor[set preference count friendship-neighbors]
  ; type word "preference:" (word preference "\n")
  report Attractiveness-Preference-Ponder * preference
end

to change-relationships-by-activity-for-actor [actor]
   
end

to-report calculate-activity-objective-payoff [activity]
  let payoff 0
  set payoff payoff + intensity
  report payoff
  
end

to-report calculate-activity-subjective-payoff [activity]
  let payoff 0
  ; set payoff payoff + 
  report payoff
  
end

to-report calculate-activity-payoff [activity]
  let payoff 0
  set payoff payoff + calculate-activity-objective-payoff activity
  report payoff  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; changes closeness of al actors that took part in the activity    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to affect-relatinships-by-activity [activity]
  ; in this version of model we check if there is link between actors, we don't create new ones 
  ask activity[
    type "actors in activity:\n"
    ask in-activity-actor-neighbors[ ; all actors that participated in this activity
      type (word "-" label "\n")
    ]
  ] 
  
end

to decay_relationsips
  ask friendships[
    set thicknes-end1 thicknes-end1 - Relationship-Decay
    if(thicknes-end1 < Relationship-Treshold-Connected)[set thicknes-end1 Relationship-Treshold-Connected]
 
    set thicknes-end2 thicknes-end2 - Relationship-Decay
    if(thicknes-end2 < Relationship-Treshold-Connected)[set thicknes-end2 Relationship-Treshold-Connected]

  ]
end